import{_ as r,c as n,af as l,j as i,a as t,G as a,w as o,B as d,o as p}from"./chunks/framework.JWorlyEv.js";const v=JSON.parse('{"title":"Decorator Injectable","description":"","frontmatter":{"meta":[{"name":"keywords","description":"api typescript node.js documentation Injectable decorator"}]},"headers":[],"relativePath":"api/di/types/common/decorators/decorator-injectable.md","filePath":"api/di/types/common/decorators/decorator-injectable.md","lastUpdated":null}'),c={name:"api/di/types/common/decorators/decorator-injectable.md"};function h(k,e,u,b,g,m){const s=d("ApiAnchorQuery");return p(),n("div",null,[e[16]||(e[16]=l('<h1 id="decorator-injectable" tabindex="-1">Decorator Injectable <a class="header-anchor" href="#decorator-injectable" aria-label="Permalink to &quot;Decorator Injectable&quot;">​</a></h1><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Injectable } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@tsed/di&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><blockquote><p>See <a href="https://github.com/tsedio/tsed/blob/v8.0.0-rc.2/packages/di/src/types/common/decorators/injectable.ts#L0-L0" target="_blank" rel="noreferrer">/packages/di/src/types/common/decorators/injectable.ts</a>.</p></blockquote><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Injectable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Partial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ProviderOpts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ClassDecorator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="description" tabindex="-1">Description <a class="header-anchor" href="#description" aria-label="Permalink to &quot;Description&quot;">​</a></h2><p>The decorators <code>@Injectable()</code> a new service can be injected in other service, controller, interceptor, etc.. on there <code>constructor</code>. All classes annotated with <code>@Injectable()</code> are built one time, excepted if you change the default provider configuration.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>@Injectable()</code> use the <code>reflect-metadata</code> to collect and inject the built provided to other services.</p></div><h3 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">​</a></h3>',10)),i("ul",null,[i("li",null,[e[1]||(e[1]=t("type (")),a(s,null,{default:o(()=>e[0]||(e[0]=[t("ProviderType")])),_:1}),e[2]||(e[2]=t(" or ")),e[3]||(e[3]=i("code",null,"string",-1)),e[4]||(e[4]=t("): Kind of provider. (Default: ")),e[5]||(e[5]=i("code",null,"ProviderType.PROVIDER",-1)),e[6]||(e[6]=t(")"))]),i("li",null,[e[8]||(e[8]=t("scope (")),a(s,null,{default:o(()=>e[7]||(e[7]=[t("ProviderScope")])),_:1}),e[9]||(e[9]=t("): Kind of provider. (Default: ")),e[10]||(e[10]=i("code",null,"ProviderScope.SINGLETON",-1)),e[11]||(e[11]=t(")"))]),i("li",null,[e[13]||(e[13]=t("provide (")),a(s,null,{default:o(()=>e[12]||(e[12]=[t("TokenProvider")])),_:1}),e[14]||(e[14]=t("): An injection token (Note: This option override default metadata generated by Typescript)."))]),e[15]||(e[15]=i("li",null,[t("deps ("),i("code",null,"Type<any>"),t("): List of class or provider which will be injected to the constructor (Note: This options override default metadata generated by Typescript).")],-1))])])}const f=r(c,[["render",h]]);export{v as __pageData,f as default};
