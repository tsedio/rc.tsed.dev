import{_ as t,c as a,af as r,o}from"./chunks/framework.JWorlyEv.js";const k=JSON.parse('{"title":"Decorator Interceptor","description":"","frontmatter":{"meta":[{"name":"keywords","description":"api typescript node.js documentation Interceptor decorator"}]},"headers":[],"relativePath":"api/di/types/common/decorators/decorator-interceptor.md","filePath":"api/di/types/common/decorators/decorator-interceptor.md","lastUpdated":null}'),s={name:"api/di/types/common/decorators/decorator-interceptor.md"};function i(c,e,n,p,d,l){return o(),a("div",null,e[0]||(e[0]=[r('<h1 id="decorator-interceptor" tabindex="-1">Decorator Interceptor <a class="header-anchor" href="#decorator-interceptor" aria-label="Permalink to &quot;Decorator Interceptor&quot;">​</a></h1><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Interceptor } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@tsed/di&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><blockquote><p>See <a href="https://github.com/tsedio/tsed/blob/v8.0.0-rc.2/packages/di/src/types/common/decorators/interceptor.ts#L0-L0" target="_blank" rel="noreferrer">/packages/di/src/types/common/decorators/interceptor.ts</a>.</p></blockquote><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Interceptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="description" tabindex="-1">Description <a class="header-anchor" href="#description" aria-label="Permalink to &quot;Description&quot;">​</a></h2><p>The decorators <code>@Interceptor()</code> a new service can be injected in other service or controller on there <code>constructor</code>. All services annotated with <code>@Interceptor()</code> are constructed one time.</p><blockquote><p><code>@Service()</code> use the <code>reflect-metadata</code> to collect and inject service on controllers or other services.</p></blockquote>',9)]))}const u=t(s,[["render",i]]);export{k as __pageData,u as default};
